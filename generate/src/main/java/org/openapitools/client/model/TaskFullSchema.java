/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RewardsSchema;
import org.openapitools.client.model.TaskType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskFullSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T05:49:51.165890400+01:00[Europe/Paris]", comments = "Generator version: 7.9.0")
public class TaskFullSchema {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TaskType type;

  public static final String SERIALIZED_NAME_MIN_QUANTITY = "min_quantity";
  @SerializedName(SERIALIZED_NAME_MIN_QUANTITY)
  private Integer minQuantity;

  public static final String SERIALIZED_NAME_MAX_QUANTITY = "max_quantity";
  @SerializedName(SERIALIZED_NAME_MAX_QUANTITY)
  private Integer maxQuantity;

  public static final String SERIALIZED_NAME_SKILL = "skill";
  @SerializedName(SERIALIZED_NAME_SKILL)
  private String skill;

  public static final String SERIALIZED_NAME_REWARDS = "rewards";
  @SerializedName(SERIALIZED_NAME_REWARDS)
  private RewardsSchema rewards;

  public TaskFullSchema() {
  }

  public TaskFullSchema code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Task objective.
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public TaskFullSchema level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Task level.
   * @return level
   */
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public TaskFullSchema type(TaskType type) {
    this.type = type;
    return this;
  }

  /**
   * The type of task.
   * @return type
   */
  @javax.annotation.Nonnull
  public TaskType getType() {
    return type;
  }

  public void setType(TaskType type) {
    this.type = type;
  }


  public TaskFullSchema minQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
    return this;
  }

  /**
   * Minimum amount of task.
   * @return minQuantity
   */
  @javax.annotation.Nonnull
  public Integer getMinQuantity() {
    return minQuantity;
  }

  public void setMinQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
  }


  public TaskFullSchema maxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
    return this;
  }

  /**
   * Maximum amount of task.
   * @return maxQuantity
   */
  @javax.annotation.Nonnull
  public Integer getMaxQuantity() {
    return maxQuantity;
  }

  public void setMaxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
  }


  public TaskFullSchema skill(String skill) {
    this.skill = skill;
    return this;
  }

  /**
   * Get skill
   * @return skill
   */
  @javax.annotation.Nullable
  public String getSkill() {
    return skill;
  }

  public void setSkill(String skill) {
    this.skill = skill;
  }


  public TaskFullSchema rewards(RewardsSchema rewards) {
    this.rewards = rewards;
    return this;
  }

  /**
   * Rewards.
   * @return rewards
   */
  @javax.annotation.Nonnull
  public RewardsSchema getRewards() {
    return rewards;
  }

  public void setRewards(RewardsSchema rewards) {
    this.rewards = rewards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskFullSchema taskFullSchema = (TaskFullSchema) o;
    return Objects.equals(this.code, taskFullSchema.code) &&
        Objects.equals(this.level, taskFullSchema.level) &&
        Objects.equals(this.type, taskFullSchema.type) &&
        Objects.equals(this.minQuantity, taskFullSchema.minQuantity) &&
        Objects.equals(this.maxQuantity, taskFullSchema.maxQuantity) &&
        Objects.equals(this.skill, taskFullSchema.skill) &&
        Objects.equals(this.rewards, taskFullSchema.rewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, level, type, minQuantity, maxQuantity, skill, rewards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskFullSchema {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    minQuantity: ").append(toIndentedString(minQuantity)).append("\n");
    sb.append("    maxQuantity: ").append(toIndentedString(maxQuantity)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("level");
    openapiFields.add("type");
    openapiFields.add("min_quantity");
    openapiFields.add("max_quantity");
    openapiFields.add("skill");
    openapiFields.add("rewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("min_quantity");
    openapiRequiredFields.add("max_quantity");
    openapiRequiredFields.add("skill");
    openapiRequiredFields.add("rewards");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskFullSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskFullSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskFullSchema is not found in the empty JSON string", TaskFullSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskFullSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskFullSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaskFullSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `type`
      TaskType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("skill") != null && !jsonObj.get("skill").isJsonNull()) && !jsonObj.get("skill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skill").toString()));
      }
      // validate the required field `rewards`
      RewardsSchema.validateJsonElement(jsonObj.get("rewards"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskFullSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskFullSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskFullSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskFullSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskFullSchema>() {
           @Override
           public void write(JsonWriter out, TaskFullSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskFullSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskFullSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskFullSchema
   * @throws IOException if the JSON string is invalid with respect to TaskFullSchema
   */
  public static TaskFullSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskFullSchema.class);
  }

  /**
   * Convert an instance of TaskFullSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

