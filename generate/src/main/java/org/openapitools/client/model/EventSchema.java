/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventContentSchema;
import org.openapitools.client.model.EventMapSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T05:49:51.165890400+01:00[Europe/Paris]", comments = "Generator version: 7.9.0")
public class EventSchema {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MAPS = "maps";
  @SerializedName(SERIALIZED_NAME_MAPS)
  private List<EventMapSchema> maps = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIN = "skin";
  @SerializedName(SERIALIZED_NAME_SKIN)
  private String skin;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Integer rate;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private EventContentSchema content;

  public EventSchema() {
  }

  public EventSchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the event.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventSchema code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code of the event. This is the event&#39;s unique identifier (ID).
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EventSchema maps(List<EventMapSchema> maps) {
    this.maps = maps;
    return this;
  }

  public EventSchema addMapsItem(EventMapSchema mapsItem) {
    if (this.maps == null) {
      this.maps = new ArrayList<>();
    }
    this.maps.add(mapsItem);
    return this;
  }

  /**
   * Map list of the event.
   * @return maps
   */
  @javax.annotation.Nonnull
  public List<EventMapSchema> getMaps() {
    return maps;
  }

  public void setMaps(List<EventMapSchema> maps) {
    this.maps = maps;
  }


  public EventSchema skin(String skin) {
    this.skin = skin;
    return this;
  }

  /**
   * Map skin of the event.
   * @return skin
   */
  @javax.annotation.Nonnull
  public String getSkin() {
    return skin;
  }

  public void setSkin(String skin) {
    this.skin = skin;
  }


  public EventSchema duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration in minutes.
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public EventSchema rate(Integer rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Rate spawn of the event. (1/rate every minute)
   * @return rate
   */
  @javax.annotation.Nonnull
  public Integer getRate() {
    return rate;
  }

  public void setRate(Integer rate) {
    this.rate = rate;
  }


  public EventSchema content(EventContentSchema content) {
    this.content = content;
    return this;
  }

  /**
   * Content of the event.
   * @return content
   */
  @javax.annotation.Nonnull
  public EventContentSchema getContent() {
    return content;
  }

  public void setContent(EventContentSchema content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSchema eventSchema = (EventSchema) o;
    return Objects.equals(this.name, eventSchema.name) &&
        Objects.equals(this.code, eventSchema.code) &&
        Objects.equals(this.maps, eventSchema.maps) &&
        Objects.equals(this.skin, eventSchema.skin) &&
        Objects.equals(this.duration, eventSchema.duration) &&
        Objects.equals(this.rate, eventSchema.rate) &&
        Objects.equals(this.content, eventSchema.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, maps, skin, duration, rate, content);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSchema {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    maps: ").append(toIndentedString(maps)).append("\n");
    sb.append("    skin: ").append(toIndentedString(skin)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("maps");
    openapiFields.add("skin");
    openapiFields.add("duration");
    openapiFields.add("rate");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("maps");
    openapiRequiredFields.add("skin");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("content");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSchema is not found in the empty JSON string", EventSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("maps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maps` to be an array in the JSON string but got `%s`", jsonObj.get("maps").toString()));
      }

      JsonArray jsonArraymaps = jsonObj.getAsJsonArray("maps");
      // validate the required field `maps` (array)
      for (int i = 0; i < jsonArraymaps.size(); i++) {
        EventMapSchema.validateJsonElement(jsonArraymaps.get(i));
      };
      if (!jsonObj.get("skin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skin").toString()));
      }
      // validate the required field `content`
      EventContentSchema.validateJsonElement(jsonObj.get("content"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSchema>() {
           @Override
           public void write(JsonWriter out, EventSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventSchema
   * @throws IOException if the JSON string is invalid with respect to EventSchema
   */
  public static EventSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSchema.class);
  }

  /**
   * Convert an instance of EventSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

