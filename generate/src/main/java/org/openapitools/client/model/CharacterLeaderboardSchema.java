/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CharacterLeaderboardSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T05:49:51.165890400+01:00[Europe/Paris]", comments = "Generator version: 7.9.0")
public class CharacterLeaderboardSchema {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_SKIN = "skin";
  @SerializedName(SERIALIZED_NAME_SKIN)
  private String skin;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_TOTAL_XP = "total_xp";
  @SerializedName(SERIALIZED_NAME_TOTAL_XP)
  private Integer totalXp;

  public static final String SERIALIZED_NAME_MINING_LEVEL = "mining_level";
  @SerializedName(SERIALIZED_NAME_MINING_LEVEL)
  private Integer miningLevel;

  public static final String SERIALIZED_NAME_MINING_TOTAL_XP = "mining_total_xp";
  @SerializedName(SERIALIZED_NAME_MINING_TOTAL_XP)
  private Integer miningTotalXp;

  public static final String SERIALIZED_NAME_WOODCUTTING_LEVEL = "woodcutting_level";
  @SerializedName(SERIALIZED_NAME_WOODCUTTING_LEVEL)
  private Integer woodcuttingLevel;

  public static final String SERIALIZED_NAME_WOODCUTTING_TOTAL_XP = "woodcutting_total_xp";
  @SerializedName(SERIALIZED_NAME_WOODCUTTING_TOTAL_XP)
  private Integer woodcuttingTotalXp;

  public static final String SERIALIZED_NAME_FISHING_LEVEL = "fishing_level";
  @SerializedName(SERIALIZED_NAME_FISHING_LEVEL)
  private Integer fishingLevel;

  public static final String SERIALIZED_NAME_FISHING_TOTAL_XP = "fishing_total_xp";
  @SerializedName(SERIALIZED_NAME_FISHING_TOTAL_XP)
  private Integer fishingTotalXp;

  public static final String SERIALIZED_NAME_WEAPONCRAFTING_LEVEL = "weaponcrafting_level";
  @SerializedName(SERIALIZED_NAME_WEAPONCRAFTING_LEVEL)
  private Integer weaponcraftingLevel;

  public static final String SERIALIZED_NAME_WEAPONCRAFTING_TOTAL_XP = "weaponcrafting_total_xp";
  @SerializedName(SERIALIZED_NAME_WEAPONCRAFTING_TOTAL_XP)
  private Integer weaponcraftingTotalXp;

  public static final String SERIALIZED_NAME_GEARCRAFTING_LEVEL = "gearcrafting_level";
  @SerializedName(SERIALIZED_NAME_GEARCRAFTING_LEVEL)
  private Integer gearcraftingLevel;

  public static final String SERIALIZED_NAME_GEARCRAFTING_TOTAL_XP = "gearcrafting_total_xp";
  @SerializedName(SERIALIZED_NAME_GEARCRAFTING_TOTAL_XP)
  private Integer gearcraftingTotalXp;

  public static final String SERIALIZED_NAME_JEWELRYCRAFTING_LEVEL = "jewelrycrafting_level";
  @SerializedName(SERIALIZED_NAME_JEWELRYCRAFTING_LEVEL)
  private Integer jewelrycraftingLevel;

  public static final String SERIALIZED_NAME_JEWELRYCRAFTING_TOTAL_XP = "jewelrycrafting_total_xp";
  @SerializedName(SERIALIZED_NAME_JEWELRYCRAFTING_TOTAL_XP)
  private Integer jewelrycraftingTotalXp;

  public static final String SERIALIZED_NAME_COOKING_LEVEL = "cooking_level";
  @SerializedName(SERIALIZED_NAME_COOKING_LEVEL)
  private Integer cookingLevel;

  public static final String SERIALIZED_NAME_COOKING_TOTAL_XP = "cooking_total_xp";
  @SerializedName(SERIALIZED_NAME_COOKING_TOTAL_XP)
  private Integer cookingTotalXp;

  public static final String SERIALIZED_NAME_ALCHEMY_LEVEL = "alchemy_level";
  @SerializedName(SERIALIZED_NAME_ALCHEMY_LEVEL)
  private Integer alchemyLevel;

  public static final String SERIALIZED_NAME_ALCHEMY_TOTAL_XP = "alchemy_total_xp";
  @SerializedName(SERIALIZED_NAME_ALCHEMY_TOTAL_XP)
  private Integer alchemyTotalXp;

  public static final String SERIALIZED_NAME_GOLD = "gold";
  @SerializedName(SERIALIZED_NAME_GOLD)
  private Integer gold;

  public CharacterLeaderboardSchema() {
  }

  public CharacterLeaderboardSchema position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Position in the leaderboard.
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CharacterLeaderboardSchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Character name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CharacterLeaderboardSchema account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Account name.
   * @return account
   */
  @javax.annotation.Nonnull
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public CharacterLeaderboardSchema skin(String skin) {
    this.skin = skin;
    return this;
  }

  /**
   * Character skin code.
   * @return skin
   */
  @javax.annotation.Nonnull
  public String getSkin() {
    return skin;
  }

  public void setSkin(String skin) {
    this.skin = skin;
  }


  public CharacterLeaderboardSchema level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Combat level.
   * @return level
   */
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public CharacterLeaderboardSchema totalXp(Integer totalXp) {
    this.totalXp = totalXp;
    return this;
  }

  /**
   * Total XP of your character.
   * @return totalXp
   */
  @javax.annotation.Nonnull
  public Integer getTotalXp() {
    return totalXp;
  }

  public void setTotalXp(Integer totalXp) {
    this.totalXp = totalXp;
  }


  public CharacterLeaderboardSchema miningLevel(Integer miningLevel) {
    this.miningLevel = miningLevel;
    return this;
  }

  /**
   * Mining level.
   * @return miningLevel
   */
  @javax.annotation.Nonnull
  public Integer getMiningLevel() {
    return miningLevel;
  }

  public void setMiningLevel(Integer miningLevel) {
    this.miningLevel = miningLevel;
  }


  public CharacterLeaderboardSchema miningTotalXp(Integer miningTotalXp) {
    this.miningTotalXp = miningTotalXp;
    return this;
  }

  /**
   * Mining total xp.
   * @return miningTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getMiningTotalXp() {
    return miningTotalXp;
  }

  public void setMiningTotalXp(Integer miningTotalXp) {
    this.miningTotalXp = miningTotalXp;
  }


  public CharacterLeaderboardSchema woodcuttingLevel(Integer woodcuttingLevel) {
    this.woodcuttingLevel = woodcuttingLevel;
    return this;
  }

  /**
   * Woodcutting level.
   * @return woodcuttingLevel
   */
  @javax.annotation.Nonnull
  public Integer getWoodcuttingLevel() {
    return woodcuttingLevel;
  }

  public void setWoodcuttingLevel(Integer woodcuttingLevel) {
    this.woodcuttingLevel = woodcuttingLevel;
  }


  public CharacterLeaderboardSchema woodcuttingTotalXp(Integer woodcuttingTotalXp) {
    this.woodcuttingTotalXp = woodcuttingTotalXp;
    return this;
  }

  /**
   * Woodcutting total xp.
   * @return woodcuttingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getWoodcuttingTotalXp() {
    return woodcuttingTotalXp;
  }

  public void setWoodcuttingTotalXp(Integer woodcuttingTotalXp) {
    this.woodcuttingTotalXp = woodcuttingTotalXp;
  }


  public CharacterLeaderboardSchema fishingLevel(Integer fishingLevel) {
    this.fishingLevel = fishingLevel;
    return this;
  }

  /**
   * Fishing level.
   * @return fishingLevel
   */
  @javax.annotation.Nonnull
  public Integer getFishingLevel() {
    return fishingLevel;
  }

  public void setFishingLevel(Integer fishingLevel) {
    this.fishingLevel = fishingLevel;
  }


  public CharacterLeaderboardSchema fishingTotalXp(Integer fishingTotalXp) {
    this.fishingTotalXp = fishingTotalXp;
    return this;
  }

  /**
   * Fishing total xp.
   * @return fishingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getFishingTotalXp() {
    return fishingTotalXp;
  }

  public void setFishingTotalXp(Integer fishingTotalXp) {
    this.fishingTotalXp = fishingTotalXp;
  }


  public CharacterLeaderboardSchema weaponcraftingLevel(Integer weaponcraftingLevel) {
    this.weaponcraftingLevel = weaponcraftingLevel;
    return this;
  }

  /**
   * Weaponcrafting level.
   * @return weaponcraftingLevel
   */
  @javax.annotation.Nonnull
  public Integer getWeaponcraftingLevel() {
    return weaponcraftingLevel;
  }

  public void setWeaponcraftingLevel(Integer weaponcraftingLevel) {
    this.weaponcraftingLevel = weaponcraftingLevel;
  }


  public CharacterLeaderboardSchema weaponcraftingTotalXp(Integer weaponcraftingTotalXp) {
    this.weaponcraftingTotalXp = weaponcraftingTotalXp;
    return this;
  }

  /**
   * Weaponcrafting total xp.
   * @return weaponcraftingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getWeaponcraftingTotalXp() {
    return weaponcraftingTotalXp;
  }

  public void setWeaponcraftingTotalXp(Integer weaponcraftingTotalXp) {
    this.weaponcraftingTotalXp = weaponcraftingTotalXp;
  }


  public CharacterLeaderboardSchema gearcraftingLevel(Integer gearcraftingLevel) {
    this.gearcraftingLevel = gearcraftingLevel;
    return this;
  }

  /**
   * Gearcrafting level.
   * @return gearcraftingLevel
   */
  @javax.annotation.Nonnull
  public Integer getGearcraftingLevel() {
    return gearcraftingLevel;
  }

  public void setGearcraftingLevel(Integer gearcraftingLevel) {
    this.gearcraftingLevel = gearcraftingLevel;
  }


  public CharacterLeaderboardSchema gearcraftingTotalXp(Integer gearcraftingTotalXp) {
    this.gearcraftingTotalXp = gearcraftingTotalXp;
    return this;
  }

  /**
   * Gearcrafting total xp.
   * @return gearcraftingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getGearcraftingTotalXp() {
    return gearcraftingTotalXp;
  }

  public void setGearcraftingTotalXp(Integer gearcraftingTotalXp) {
    this.gearcraftingTotalXp = gearcraftingTotalXp;
  }


  public CharacterLeaderboardSchema jewelrycraftingLevel(Integer jewelrycraftingLevel) {
    this.jewelrycraftingLevel = jewelrycraftingLevel;
    return this;
  }

  /**
   * Jewelrycrafting level.
   * @return jewelrycraftingLevel
   */
  @javax.annotation.Nonnull
  public Integer getJewelrycraftingLevel() {
    return jewelrycraftingLevel;
  }

  public void setJewelrycraftingLevel(Integer jewelrycraftingLevel) {
    this.jewelrycraftingLevel = jewelrycraftingLevel;
  }


  public CharacterLeaderboardSchema jewelrycraftingTotalXp(Integer jewelrycraftingTotalXp) {
    this.jewelrycraftingTotalXp = jewelrycraftingTotalXp;
    return this;
  }

  /**
   * Jewelrycrafting total xp.
   * @return jewelrycraftingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getJewelrycraftingTotalXp() {
    return jewelrycraftingTotalXp;
  }

  public void setJewelrycraftingTotalXp(Integer jewelrycraftingTotalXp) {
    this.jewelrycraftingTotalXp = jewelrycraftingTotalXp;
  }


  public CharacterLeaderboardSchema cookingLevel(Integer cookingLevel) {
    this.cookingLevel = cookingLevel;
    return this;
  }

  /**
   * Cooking level.
   * @return cookingLevel
   */
  @javax.annotation.Nonnull
  public Integer getCookingLevel() {
    return cookingLevel;
  }

  public void setCookingLevel(Integer cookingLevel) {
    this.cookingLevel = cookingLevel;
  }


  public CharacterLeaderboardSchema cookingTotalXp(Integer cookingTotalXp) {
    this.cookingTotalXp = cookingTotalXp;
    return this;
  }

  /**
   * Cooking total xp.
   * @return cookingTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getCookingTotalXp() {
    return cookingTotalXp;
  }

  public void setCookingTotalXp(Integer cookingTotalXp) {
    this.cookingTotalXp = cookingTotalXp;
  }


  public CharacterLeaderboardSchema alchemyLevel(Integer alchemyLevel) {
    this.alchemyLevel = alchemyLevel;
    return this;
  }

  /**
   * Alchemy level.
   * @return alchemyLevel
   */
  @javax.annotation.Nonnull
  public Integer getAlchemyLevel() {
    return alchemyLevel;
  }

  public void setAlchemyLevel(Integer alchemyLevel) {
    this.alchemyLevel = alchemyLevel;
  }


  public CharacterLeaderboardSchema alchemyTotalXp(Integer alchemyTotalXp) {
    this.alchemyTotalXp = alchemyTotalXp;
    return this;
  }

  /**
   * Alchemy total xp.
   * @return alchemyTotalXp
   */
  @javax.annotation.Nonnull
  public Integer getAlchemyTotalXp() {
    return alchemyTotalXp;
  }

  public void setAlchemyTotalXp(Integer alchemyTotalXp) {
    this.alchemyTotalXp = alchemyTotalXp;
  }


  public CharacterLeaderboardSchema gold(Integer gold) {
    this.gold = gold;
    return this;
  }

  /**
   * The numbers of gold on this character.
   * @return gold
   */
  @javax.annotation.Nonnull
  public Integer getGold() {
    return gold;
  }

  public void setGold(Integer gold) {
    this.gold = gold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharacterLeaderboardSchema characterLeaderboardSchema = (CharacterLeaderboardSchema) o;
    return Objects.equals(this.position, characterLeaderboardSchema.position) &&
        Objects.equals(this.name, characterLeaderboardSchema.name) &&
        Objects.equals(this.account, characterLeaderboardSchema.account) &&
        Objects.equals(this.skin, characterLeaderboardSchema.skin) &&
        Objects.equals(this.level, characterLeaderboardSchema.level) &&
        Objects.equals(this.totalXp, characterLeaderboardSchema.totalXp) &&
        Objects.equals(this.miningLevel, characterLeaderboardSchema.miningLevel) &&
        Objects.equals(this.miningTotalXp, characterLeaderboardSchema.miningTotalXp) &&
        Objects.equals(this.woodcuttingLevel, characterLeaderboardSchema.woodcuttingLevel) &&
        Objects.equals(this.woodcuttingTotalXp, characterLeaderboardSchema.woodcuttingTotalXp) &&
        Objects.equals(this.fishingLevel, characterLeaderboardSchema.fishingLevel) &&
        Objects.equals(this.fishingTotalXp, characterLeaderboardSchema.fishingTotalXp) &&
        Objects.equals(this.weaponcraftingLevel, characterLeaderboardSchema.weaponcraftingLevel) &&
        Objects.equals(this.weaponcraftingTotalXp, characterLeaderboardSchema.weaponcraftingTotalXp) &&
        Objects.equals(this.gearcraftingLevel, characterLeaderboardSchema.gearcraftingLevel) &&
        Objects.equals(this.gearcraftingTotalXp, characterLeaderboardSchema.gearcraftingTotalXp) &&
        Objects.equals(this.jewelrycraftingLevel, characterLeaderboardSchema.jewelrycraftingLevel) &&
        Objects.equals(this.jewelrycraftingTotalXp, characterLeaderboardSchema.jewelrycraftingTotalXp) &&
        Objects.equals(this.cookingLevel, characterLeaderboardSchema.cookingLevel) &&
        Objects.equals(this.cookingTotalXp, characterLeaderboardSchema.cookingTotalXp) &&
        Objects.equals(this.alchemyLevel, characterLeaderboardSchema.alchemyLevel) &&
        Objects.equals(this.alchemyTotalXp, characterLeaderboardSchema.alchemyTotalXp) &&
        Objects.equals(this.gold, characterLeaderboardSchema.gold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, name, account, skin, level, totalXp, miningLevel, miningTotalXp, woodcuttingLevel, woodcuttingTotalXp, fishingLevel, fishingTotalXp, weaponcraftingLevel, weaponcraftingTotalXp, gearcraftingLevel, gearcraftingTotalXp, jewelrycraftingLevel, jewelrycraftingTotalXp, cookingLevel, cookingTotalXp, alchemyLevel, alchemyTotalXp, gold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharacterLeaderboardSchema {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    skin: ").append(toIndentedString(skin)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    totalXp: ").append(toIndentedString(totalXp)).append("\n");
    sb.append("    miningLevel: ").append(toIndentedString(miningLevel)).append("\n");
    sb.append("    miningTotalXp: ").append(toIndentedString(miningTotalXp)).append("\n");
    sb.append("    woodcuttingLevel: ").append(toIndentedString(woodcuttingLevel)).append("\n");
    sb.append("    woodcuttingTotalXp: ").append(toIndentedString(woodcuttingTotalXp)).append("\n");
    sb.append("    fishingLevel: ").append(toIndentedString(fishingLevel)).append("\n");
    sb.append("    fishingTotalXp: ").append(toIndentedString(fishingTotalXp)).append("\n");
    sb.append("    weaponcraftingLevel: ").append(toIndentedString(weaponcraftingLevel)).append("\n");
    sb.append("    weaponcraftingTotalXp: ").append(toIndentedString(weaponcraftingTotalXp)).append("\n");
    sb.append("    gearcraftingLevel: ").append(toIndentedString(gearcraftingLevel)).append("\n");
    sb.append("    gearcraftingTotalXp: ").append(toIndentedString(gearcraftingTotalXp)).append("\n");
    sb.append("    jewelrycraftingLevel: ").append(toIndentedString(jewelrycraftingLevel)).append("\n");
    sb.append("    jewelrycraftingTotalXp: ").append(toIndentedString(jewelrycraftingTotalXp)).append("\n");
    sb.append("    cookingLevel: ").append(toIndentedString(cookingLevel)).append("\n");
    sb.append("    cookingTotalXp: ").append(toIndentedString(cookingTotalXp)).append("\n");
    sb.append("    alchemyLevel: ").append(toIndentedString(alchemyLevel)).append("\n");
    sb.append("    alchemyTotalXp: ").append(toIndentedString(alchemyTotalXp)).append("\n");
    sb.append("    gold: ").append(toIndentedString(gold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("name");
    openapiFields.add("account");
    openapiFields.add("skin");
    openapiFields.add("level");
    openapiFields.add("total_xp");
    openapiFields.add("mining_level");
    openapiFields.add("mining_total_xp");
    openapiFields.add("woodcutting_level");
    openapiFields.add("woodcutting_total_xp");
    openapiFields.add("fishing_level");
    openapiFields.add("fishing_total_xp");
    openapiFields.add("weaponcrafting_level");
    openapiFields.add("weaponcrafting_total_xp");
    openapiFields.add("gearcrafting_level");
    openapiFields.add("gearcrafting_total_xp");
    openapiFields.add("jewelrycrafting_level");
    openapiFields.add("jewelrycrafting_total_xp");
    openapiFields.add("cooking_level");
    openapiFields.add("cooking_total_xp");
    openapiFields.add("alchemy_level");
    openapiFields.add("alchemy_total_xp");
    openapiFields.add("gold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("skin");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("total_xp");
    openapiRequiredFields.add("mining_level");
    openapiRequiredFields.add("mining_total_xp");
    openapiRequiredFields.add("woodcutting_level");
    openapiRequiredFields.add("woodcutting_total_xp");
    openapiRequiredFields.add("fishing_level");
    openapiRequiredFields.add("fishing_total_xp");
    openapiRequiredFields.add("weaponcrafting_level");
    openapiRequiredFields.add("weaponcrafting_total_xp");
    openapiRequiredFields.add("gearcrafting_level");
    openapiRequiredFields.add("gearcrafting_total_xp");
    openapiRequiredFields.add("jewelrycrafting_level");
    openapiRequiredFields.add("jewelrycrafting_total_xp");
    openapiRequiredFields.add("cooking_level");
    openapiRequiredFields.add("cooking_total_xp");
    openapiRequiredFields.add("alchemy_level");
    openapiRequiredFields.add("alchemy_total_xp");
    openapiRequiredFields.add("gold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CharacterLeaderboardSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CharacterLeaderboardSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CharacterLeaderboardSchema is not found in the empty JSON string", CharacterLeaderboardSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CharacterLeaderboardSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CharacterLeaderboardSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CharacterLeaderboardSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if (!jsonObj.get("skin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CharacterLeaderboardSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CharacterLeaderboardSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CharacterLeaderboardSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CharacterLeaderboardSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<CharacterLeaderboardSchema>() {
           @Override
           public void write(JsonWriter out, CharacterLeaderboardSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CharacterLeaderboardSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CharacterLeaderboardSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CharacterLeaderboardSchema
   * @throws IOException if the JSON string is invalid with respect to CharacterLeaderboardSchema
   */
  public static CharacterLeaderboardSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CharacterLeaderboardSchema.class);
  }

  /**
   * Convert an instance of CharacterLeaderboardSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

