/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountLeaderboardSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T05:49:51.165890400+01:00[Europe/Paris]", comments = "Generator version: 7.9.0")
public class AccountLeaderboardSchema {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AccountStatus status;

  public static final String SERIALIZED_NAME_ACHIEVEMENTS_POINTS = "achievements_points";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENTS_POINTS)
  private Integer achievementsPoints;

  public AccountLeaderboardSchema() {
  }

  public AccountLeaderboardSchema position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Position in the leaderboard.
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public AccountLeaderboardSchema account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Account name.
   * @return account
   */
  @javax.annotation.Nonnull
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public AccountLeaderboardSchema status(AccountStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Member status.
   * @return status
   */
  @javax.annotation.Nonnull
  public AccountStatus getStatus() {
    return status;
  }

  public void setStatus(AccountStatus status) {
    this.status = status;
  }


  public AccountLeaderboardSchema achievementsPoints(Integer achievementsPoints) {
    this.achievementsPoints = achievementsPoints;
    return this;
  }

  /**
   * Achievements points.
   * @return achievementsPoints
   */
  @javax.annotation.Nonnull
  public Integer getAchievementsPoints() {
    return achievementsPoints;
  }

  public void setAchievementsPoints(Integer achievementsPoints) {
    this.achievementsPoints = achievementsPoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountLeaderboardSchema accountLeaderboardSchema = (AccountLeaderboardSchema) o;
    return Objects.equals(this.position, accountLeaderboardSchema.position) &&
        Objects.equals(this.account, accountLeaderboardSchema.account) &&
        Objects.equals(this.status, accountLeaderboardSchema.status) &&
        Objects.equals(this.achievementsPoints, accountLeaderboardSchema.achievementsPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, account, status, achievementsPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountLeaderboardSchema {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    achievementsPoints: ").append(toIndentedString(achievementsPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("account");
    openapiFields.add("status");
    openapiFields.add("achievements_points");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("achievements_points");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountLeaderboardSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountLeaderboardSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountLeaderboardSchema is not found in the empty JSON string", AccountLeaderboardSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountLeaderboardSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountLeaderboardSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountLeaderboardSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      // validate the required field `status`
      AccountStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountLeaderboardSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountLeaderboardSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountLeaderboardSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountLeaderboardSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountLeaderboardSchema>() {
           @Override
           public void write(JsonWriter out, AccountLeaderboardSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountLeaderboardSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountLeaderboardSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountLeaderboardSchema
   * @throws IOException if the JSON string is invalid with respect to AccountLeaderboardSchema
   */
  public static AccountLeaderboardSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountLeaderboardSchema.class);
  }

  /**
   * Convert an instance of AccountLeaderboardSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

