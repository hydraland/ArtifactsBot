/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BankSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-02T05:49:51.165890400+01:00[Europe/Paris]", comments = "Generator version: 7.9.0")
public class BankSchema {
  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Integer slots;

  public static final String SERIALIZED_NAME_EXPANSIONS = "expansions";
  @SerializedName(SERIALIZED_NAME_EXPANSIONS)
  private Integer expansions;

  public static final String SERIALIZED_NAME_NEXT_EXPANSION_COST = "next_expansion_cost";
  @SerializedName(SERIALIZED_NAME_NEXT_EXPANSION_COST)
  private Integer nextExpansionCost;

  public static final String SERIALIZED_NAME_GOLD = "gold";
  @SerializedName(SERIALIZED_NAME_GOLD)
  private Integer gold;

  public BankSchema() {
  }

  public BankSchema slots(Integer slots) {
    this.slots = slots;
    return this;
  }

  /**
   * Maximum slots in your bank.
   * minimum: 0
   * @return slots
   */
  @javax.annotation.Nonnull
  public Integer getSlots() {
    return slots;
  }

  public void setSlots(Integer slots) {
    this.slots = slots;
  }


  public BankSchema expansions(Integer expansions) {
    this.expansions = expansions;
    return this;
  }

  /**
   * Bank expansions.
   * minimum: 0
   * @return expansions
   */
  @javax.annotation.Nonnull
  public Integer getExpansions() {
    return expansions;
  }

  public void setExpansions(Integer expansions) {
    this.expansions = expansions;
  }


  public BankSchema nextExpansionCost(Integer nextExpansionCost) {
    this.nextExpansionCost = nextExpansionCost;
    return this;
  }

  /**
   * Next expansion cost.
   * minimum: 0
   * @return nextExpansionCost
   */
  @javax.annotation.Nonnull
  public Integer getNextExpansionCost() {
    return nextExpansionCost;
  }

  public void setNextExpansionCost(Integer nextExpansionCost) {
    this.nextExpansionCost = nextExpansionCost;
  }


  public BankSchema gold(Integer gold) {
    this.gold = gold;
    return this;
  }

  /**
   * Quantity of gold in your bank.
   * minimum: 0
   * @return gold
   */
  @javax.annotation.Nonnull
  public Integer getGold() {
    return gold;
  }

  public void setGold(Integer gold) {
    this.gold = gold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankSchema bankSchema = (BankSchema) o;
    return Objects.equals(this.slots, bankSchema.slots) &&
        Objects.equals(this.expansions, bankSchema.expansions) &&
        Objects.equals(this.nextExpansionCost, bankSchema.nextExpansionCost) &&
        Objects.equals(this.gold, bankSchema.gold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slots, expansions, nextExpansionCost, gold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankSchema {\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    expansions: ").append(toIndentedString(expansions)).append("\n");
    sb.append("    nextExpansionCost: ").append(toIndentedString(nextExpansionCost)).append("\n");
    sb.append("    gold: ").append(toIndentedString(gold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slots");
    openapiFields.add("expansions");
    openapiFields.add("next_expansion_cost");
    openapiFields.add("gold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("slots");
    openapiRequiredFields.add("expansions");
    openapiRequiredFields.add("next_expansion_cost");
    openapiRequiredFields.add("gold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankSchema is not found in the empty JSON string", BankSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<BankSchema>() {
           @Override
           public void write(JsonWriter out, BankSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankSchema
   * @throws IOException if the JSON string is invalid with respect to BankSchema
   */
  public static BankSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankSchema.class);
  }

  /**
   * Convert an instance of BankSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

