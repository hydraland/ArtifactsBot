/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountDetailsSchema;
import org.openapitools.client.model.AchievementType;
import org.openapitools.client.model.AddAccountSchema;
import org.openapitools.client.model.DataPageAccountAchievementSchema;
import org.openapitools.client.model.ResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAccountAccountsCreatePost
     * @param addAccountSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account created successfully. </td><td>  -  </td></tr>
        <tr><td> 456 </td><td> Username already used. </td><td>  -  </td></tr>
        <tr><td> 457 </td><td> Email already used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAccountsCreatePostCall(AddAccountSchema addAccountSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccountSchema;

        // create path and map variables
        String localVarPath = "/accounts/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountAccountsCreatePostValidateBeforeCall(AddAccountSchema addAccountSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addAccountSchema' is set
        if (addAccountSchema == null) {
            throw new ApiException("Missing the required parameter 'addAccountSchema' when calling createAccountAccountsCreatePost(Async)");
        }

        return createAccountAccountsCreatePostCall(addAccountSchema, _callback);

    }

    /**
     * Create Account
     * 
     * @param addAccountSchema  (required)
     * @return ResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account created successfully. </td><td>  -  </td></tr>
        <tr><td> 456 </td><td> Username already used. </td><td>  -  </td></tr>
        <tr><td> 457 </td><td> Email already used. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSchema createAccountAccountsCreatePost(AddAccountSchema addAccountSchema) throws ApiException {
        ApiResponse<ResponseSchema> localVarResp = createAccountAccountsCreatePostWithHttpInfo(addAccountSchema);
        return localVarResp.getData();
    }

    /**
     * Create Account
     * 
     * @param addAccountSchema  (required)
     * @return ApiResponse&lt;ResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account created successfully. </td><td>  -  </td></tr>
        <tr><td> 456 </td><td> Username already used. </td><td>  -  </td></tr>
        <tr><td> 457 </td><td> Email already used. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSchema> createAccountAccountsCreatePostWithHttpInfo(AddAccountSchema addAccountSchema) throws ApiException {
        okhttp3.Call localVarCall = createAccountAccountsCreatePostValidateBeforeCall(addAccountSchema, null);
        Type localVarReturnType = new TypeToken<ResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Account (asynchronously)
     * 
     * @param addAccountSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account created successfully. </td><td>  -  </td></tr>
        <tr><td> 456 </td><td> Username already used. </td><td>  -  </td></tr>
        <tr><td> 457 </td><td> Email already used. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAccountsCreatePostAsync(AddAccountSchema addAccountSchema, final ApiCallback<ResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountAccountsCreatePostValidateBeforeCall(addAccountSchema, _callback);
        Type localVarReturnType = new TypeToken<ResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAccountsAccountGet
     * @param account The account name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAccountsAccountGetCall(String account, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account}"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAccountsAccountGetValidateBeforeCall(String account, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getAccountAccountsAccountGet(Async)");
        }

        return getAccountAccountsAccountGetCall(account, _callback);

    }

    /**
     * Get Account
     * Retrieve the details of a character.
     * @param account The account name. (required)
     * @return AccountDetailsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public AccountDetailsSchema getAccountAccountsAccountGet(String account) throws ApiException {
        ApiResponse<AccountDetailsSchema> localVarResp = getAccountAccountsAccountGetWithHttpInfo(account);
        return localVarResp.getData();
    }

    /**
     * Get Account
     * Retrieve the details of a character.
     * @param account The account name. (required)
     * @return ApiResponse&lt;AccountDetailsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountDetailsSchema> getAccountAccountsAccountGetWithHttpInfo(String account) throws ApiException {
        okhttp3.Call localVarCall = getAccountAccountsAccountGetValidateBeforeCall(account, null);
        Type localVarReturnType = new TypeToken<AccountDetailsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account (asynchronously)
     * Retrieve the details of a character.
     * @param account The account name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAccountsAccountGetAsync(String account, final ApiCallback<AccountDetailsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAccountsAccountGetValidateBeforeCall(account, _callback);
        Type localVarReturnType = new TypeToken<AccountDetailsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAchievementsAccountsAccountAchievementsGet
     * @param account The character name. (required)
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched achievements. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAchievementsAccountsAccountAchievementsGetCall(String account, AchievementType type, Boolean completed, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account}/achievements"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAchievementsAccountsAccountAchievementsGetValidateBeforeCall(String account, AchievementType type, Boolean completed, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling getAccountAchievementsAccountsAccountAchievementsGet(Async)");
        }

        return getAccountAchievementsAccountsAccountAchievementsGetCall(account, type, completed, page, size, _callback);

    }

    /**
     * Get Account Achievements
     * Retrieve the achievements of a account.
     * @param account The character name. (required)
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageAccountAchievementSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched achievements. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public DataPageAccountAchievementSchema getAccountAchievementsAccountsAccountAchievementsGet(String account, AchievementType type, Boolean completed, Integer page, Integer size) throws ApiException {
        ApiResponse<DataPageAccountAchievementSchema> localVarResp = getAccountAchievementsAccountsAccountAchievementsGetWithHttpInfo(account, type, completed, page, size);
        return localVarResp.getData();
    }

    /**
     * Get Account Achievements
     * Retrieve the achievements of a account.
     * @param account The character name. (required)
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse&lt;DataPageAccountAchievementSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched achievements. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataPageAccountAchievementSchema> getAccountAchievementsAccountsAccountAchievementsGetWithHttpInfo(String account, AchievementType type, Boolean completed, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getAccountAchievementsAccountsAccountAchievementsGetValidateBeforeCall(account, type, completed, page, size, null);
        Type localVarReturnType = new TypeToken<DataPageAccountAchievementSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Achievements (asynchronously)
     * Retrieve the achievements of a account.
     * @param account The character name. (required)
     * @param type Type of achievements. (optional)
     * @param completed Filter by completed achievements. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched achievements. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAchievementsAccountsAccountAchievementsGetAsync(String account, AchievementType type, Boolean completed, Integer page, Integer size, final ApiCallback<DataPageAccountAchievementSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAchievementsAccountsAccountAchievementsGetValidateBeforeCall(account, type, completed, page, size, _callback);
        Type localVarReturnType = new TypeToken<DataPageAccountAchievementSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
