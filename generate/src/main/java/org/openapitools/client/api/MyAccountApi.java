/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BankResponseSchema;
import org.openapitools.client.model.ChangePassword;
import org.openapitools.client.model.DataPageGEOrderSchema;
import org.openapitools.client.model.DataPageGeOrderHistorySchema;
import org.openapitools.client.model.DataPageSimpleItemSchema;
import org.openapitools.client.model.MyAccountDetailsSchema;
import org.openapitools.client.model.ResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MyAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MyAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePasswordMyChangePasswordPost
     * @param changePassword  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password changed successfully. </td><td>  -  </td></tr>
        <tr><td> 458 </td><td> Use a different password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordMyChangePasswordPostCall(ChangePassword changePassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePassword;

        // create path and map variables
        String localVarPath = "/my/change_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordMyChangePasswordPostValidateBeforeCall(ChangePassword changePassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePassword' is set
        if (changePassword == null) {
            throw new ApiException("Missing the required parameter 'changePassword' when calling changePasswordMyChangePasswordPost(Async)");
        }

        return changePasswordMyChangePasswordPostCall(changePassword, _callback);

    }

    /**
     * Change Password
     * Change your account password. Changing the password reset the account token.
     * @param changePassword  (required)
     * @return ResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password changed successfully. </td><td>  -  </td></tr>
        <tr><td> 458 </td><td> Use a different password. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSchema changePasswordMyChangePasswordPost(ChangePassword changePassword) throws ApiException {
        ApiResponse<ResponseSchema> localVarResp = changePasswordMyChangePasswordPostWithHttpInfo(changePassword);
        return localVarResp.getData();
    }

    /**
     * Change Password
     * Change your account password. Changing the password reset the account token.
     * @param changePassword  (required)
     * @return ApiResponse&lt;ResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password changed successfully. </td><td>  -  </td></tr>
        <tr><td> 458 </td><td> Use a different password. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSchema> changePasswordMyChangePasswordPostWithHttpInfo(ChangePassword changePassword) throws ApiException {
        okhttp3.Call localVarCall = changePasswordMyChangePasswordPostValidateBeforeCall(changePassword, null);
        Type localVarReturnType = new TypeToken<ResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Password (asynchronously)
     * Change your account password. Changing the password reset the account token.
     * @param changePassword  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Password changed successfully. </td><td>  -  </td></tr>
        <tr><td> 458 </td><td> Use a different password. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordMyChangePasswordPostAsync(ChangePassword changePassword, final ApiCallback<ResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordMyChangePasswordPostValidateBeforeCall(changePassword, _callback);
        Type localVarReturnType = new TypeToken<ResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountDetailsMyDetailsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailsMyDetailsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountDetailsMyDetailsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAccountDetailsMyDetailsGetCall(_callback);

    }

    /**
     * Get Account Details
     * Fetch account details.
     * @return MyAccountDetailsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account details. </td><td>  -  </td></tr>
     </table>
     */
    public MyAccountDetailsSchema getAccountDetailsMyDetailsGet() throws ApiException {
        ApiResponse<MyAccountDetailsSchema> localVarResp = getAccountDetailsMyDetailsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Account Details
     * Fetch account details.
     * @return ApiResponse&lt;MyAccountDetailsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MyAccountDetailsSchema> getAccountDetailsMyDetailsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountDetailsMyDetailsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MyAccountDetailsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Details (asynchronously)
     * Fetch account details.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched account details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountDetailsMyDetailsGetAsync(final ApiCallback<MyAccountDetailsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountDetailsMyDetailsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MyAccountDetailsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankDetailsMyBankGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched bank details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankDetailsMyBankGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/bank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankDetailsMyBankGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getBankDetailsMyBankGetCall(_callback);

    }

    /**
     * Get Bank Details
     * Fetch bank details.
     * @return BankResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched bank details. </td><td>  -  </td></tr>
     </table>
     */
    public BankResponseSchema getBankDetailsMyBankGet() throws ApiException {
        ApiResponse<BankResponseSchema> localVarResp = getBankDetailsMyBankGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Bank Details
     * Fetch bank details.
     * @return ApiResponse&lt;BankResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched bank details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankResponseSchema> getBankDetailsMyBankGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBankDetailsMyBankGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BankResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bank Details (asynchronously)
     * Fetch bank details.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched bank details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankDetailsMyBankGetAsync(final ApiCallback<BankResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankDetailsMyBankGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BankResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBankItemsMyBankItemsGet
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched items. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankItemsMyBankItemsGetCall(String itemCode, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/bank/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_code", itemCode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankItemsMyBankItemsGetValidateBeforeCall(String itemCode, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return getBankItemsMyBankItemsGetCall(itemCode, page, size, _callback);

    }

    /**
     * Get Bank Items
     * Fetch all items in your bank.
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageSimpleItemSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched items. </td><td>  -  </td></tr>
     </table>
     */
    public DataPageSimpleItemSchema getBankItemsMyBankItemsGet(String itemCode, Integer page, Integer size) throws ApiException {
        ApiResponse<DataPageSimpleItemSchema> localVarResp = getBankItemsMyBankItemsGetWithHttpInfo(itemCode, page, size);
        return localVarResp.getData();
    }

    /**
     * Get Bank Items
     * Fetch all items in your bank.
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse&lt;DataPageSimpleItemSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched items. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataPageSimpleItemSchema> getBankItemsMyBankItemsGetWithHttpInfo(String itemCode, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getBankItemsMyBankItemsGetValidateBeforeCall(itemCode, page, size, null);
        Type localVarReturnType = new TypeToken<DataPageSimpleItemSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bank Items (asynchronously)
     * Fetch all items in your bank.
     * @param itemCode Item to search in your bank. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched items. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBankItemsMyBankItemsGetAsync(String itemCode, Integer page, Integer size, final ApiCallback<DataPageSimpleItemSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankItemsMyBankItemsGetValidateBeforeCall(itemCode, page, size, _callback);
        Type localVarReturnType = new TypeToken<DataPageSimpleItemSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeSellHistoryMyGrandexchangeHistoryGet
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched sales history. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeSellHistoryMyGrandexchangeHistoryGetCall(String id, String code, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/grandexchange/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeSellHistoryMyGrandexchangeHistoryGetValidateBeforeCall(String id, String code, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return getGeSellHistoryMyGrandexchangeHistoryGetCall(id, code, page, size, _callback);

    }

    /**
     * Get Ge Sell History
     * Fetch your sales history of the last 7 days.
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGeOrderHistorySchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched sales history. </td><td>  -  </td></tr>
     </table>
     */
    public DataPageGeOrderHistorySchema getGeSellHistoryMyGrandexchangeHistoryGet(String id, String code, Integer page, Integer size) throws ApiException {
        ApiResponse<DataPageGeOrderHistorySchema> localVarResp = getGeSellHistoryMyGrandexchangeHistoryGetWithHttpInfo(id, code, page, size);
        return localVarResp.getData();
    }

    /**
     * Get Ge Sell History
     * Fetch your sales history of the last 7 days.
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse&lt;DataPageGeOrderHistorySchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched sales history. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataPageGeOrderHistorySchema> getGeSellHistoryMyGrandexchangeHistoryGetWithHttpInfo(String id, String code, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getGeSellHistoryMyGrandexchangeHistoryGetValidateBeforeCall(id, code, page, size, null);
        Type localVarReturnType = new TypeToken<DataPageGeOrderHistorySchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ge Sell History (asynchronously)
     * Fetch your sales history of the last 7 days.
     * @param id Order ID to search in your history. (optional)
     * @param code Item to search in your history. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched sales history. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeSellHistoryMyGrandexchangeHistoryGetAsync(String id, String code, Integer page, Integer size, final ApiCallback<DataPageGeOrderHistorySchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeSellHistoryMyGrandexchangeHistoryGetValidateBeforeCall(id, code, page, size, _callback);
        Type localVarReturnType = new TypeToken<DataPageGeOrderHistorySchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGeSellOrdersMyGrandexchangeOrdersGet
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched orders details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeSellOrdersMyGrandexchangeOrdersGetCall(String code, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/grandexchange/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeSellOrdersMyGrandexchangeOrdersGetValidateBeforeCall(String code, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return getGeSellOrdersMyGrandexchangeOrdersGetCall(code, page, size, _callback);

    }

    /**
     * Get Ge Sell Orders
     * Fetch your sell orders details.
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageGEOrderSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched orders details. </td><td>  -  </td></tr>
     </table>
     */
    public DataPageGEOrderSchema getGeSellOrdersMyGrandexchangeOrdersGet(String code, Integer page, Integer size) throws ApiException {
        ApiResponse<DataPageGEOrderSchema> localVarResp = getGeSellOrdersMyGrandexchangeOrdersGetWithHttpInfo(code, page, size);
        return localVarResp.getData();
    }

    /**
     * Get Ge Sell Orders
     * Fetch your sell orders details.
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse&lt;DataPageGEOrderSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched orders details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataPageGEOrderSchema> getGeSellOrdersMyGrandexchangeOrdersGetWithHttpInfo(String code, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getGeSellOrdersMyGrandexchangeOrdersGetValidateBeforeCall(code, page, size, null);
        Type localVarReturnType = new TypeToken<DataPageGEOrderSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ge Sell Orders (asynchronously)
     * Fetch your sell orders details.
     * @param code The code of the item. (optional)
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched orders details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGeSellOrdersMyGrandexchangeOrdersGetAsync(String code, Integer page, Integer size, final ApiCallback<DataPageGEOrderSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeSellOrdersMyGrandexchangeOrdersGetValidateBeforeCall(code, page, size, _callback);
        Type localVarReturnType = new TypeToken<DataPageGEOrderSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
